
# once the mysql pods are up. Exec the mysql pod using following commands
# kubectl exec -it pod_name -- bash
# mysql -u root -p
# password: mysql1234
# CREATE DATABASE wordpress;
# show databases;

---
apiVersion: v1
kind: Namespace
metadata:
  name: demo-app
---

apiVersion: v1
kind: Secret
metadata:
  name: wp-db-secrets
  namespace: demo-app
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: bXlzcWwxMjM0
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: wordpress-data
  namespace: demo-app
  labels:
    type: local
spec:
  storageClassName: default
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/var/lib/mysql"
---
    apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: mysql-data
      namespace: demo-app
      labels:
        type: local
    spec:
      storageClassName: default
      capacity:
        storage: 10Gi
      accessModes:
        - ReadWriteOnce
      hostPath:
        path: "/var/www"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-volume
  namespace: demo-app
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: default
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mysql
  namespace: demo-app
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: database
        image: mysql:5.7
        args:
          # mount volume
          - "--ignore-db-dir=lost+found"
        # add root password
        envFrom:
          - secretRef:
              name: wp-db-secrets
        ports:
          - containerPort: 3306
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-data
        persistentVolumeClaim:
          claimName: mysql-volume

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: demo-app
spec:
  ports:
  - port: 3306
    protocol: TCP
  selector:
    app: mysql

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-volume
  namespace: demo-app
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: default

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: demo-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:5.8.3-php7.4-apache
          ports:
          - containerPort: 80
            name: wordpress
          volumeMounts:
            - name: wordpress-data
              mountPath: /var/www
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql-service.demo-app.svc.cluster.local
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: wp-db-secrets
                  key: MYSQL_ROOT_PASSWORD
            - name: WORDPRESS_DB_USER
              value: root
            - name: WORDPRESS_DB_NAME
              value: wordpress
      volumes:
        - name: wordpress-data
          persistentVolumeClaim:
            claimName: wordpress-volume
---
kind: Service
apiVersion: v1
metadata:
  name: wordpress-service
  namespace: demo-app
spec:
  type: LoadBalancer
  selector:
    app: wordpress
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80

